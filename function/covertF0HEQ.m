% convertF0HEQ: implement the histogram equlization post-filtering proposed
%  by Wu et al. in paper "Text-Independent F0 Transformation with
%  Non-Parallel Data for Voice Conversion." This function converts the
%  source input to the range of the target speaker
%
% Syntax: covF0 = covertF0HEQ(f0raw, srcMdl, tgtMdl)
%
% Inputs:
%   f0raw: input source F0 sequence, a N*1 vector
%   srcMdl: reference histogram of the source, an object generated by
%   trainF0HEQ
%   tgtMdl: reference histogram of the target, an object generated by
%   trainF0HEQ
%
% Outputs:
%   covf0: converted source F0 sequence, a N*1 vector
%
% Other m-files required: None
%
% Subfunctions: nearestBin
%
% MAT-file required: None
%
% Author: Guanlong Zhao
% Email: gzhao@tamu.edu
% Created: 03/27/2017; Last revision: 04/23/2019
% Revision log:
%   03/27/2017: function creation, Guanlong Zhao
%   03/28/2017: bug fixes, Guanlong Zhao
%   04/01/2017: added source model, added outlier handling code, GZ
%   04/03/2017: minor fix, GZ
%   04/23/2019: fix docs, GZ

% Copyright 2017 Guanlong Zhao
% 
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
% 
%     http://www.apache.org/licenses/LICENSE-2.0
% 
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.

function covF0 = covertF0HEQ(f0raw, srcMdl, tgtMdl)
    % Convert
    covF0 = zeros(size(f0raw));
    numEdges = length(srcMdl.eqProbEdges);
    for ii = 1:length(covF0)
        % Only convert non-silent frames
        if f0raw(ii) > 0
            idx = nearestBin(f0raw(ii), srcMdl.eqProbEdges');
            if (idx+1) <= numEdges % A high pitch
                if idx == 1 % A relatively low pitch
                    ratio = 0.1;
                else
                    neqSrc = (srcMdl.eqProbEdges(idx+1) ~= srcMdl.eqProbEdges(idx));
                    neqTgt = (tgtMdl.eqProbEdges(idx+1) ~= tgtMdl.eqProbEdges(idx));
                    if neqSrc && neqTgt
                        ratio = (tgtMdl.eqProbEdges(idx+1)-tgtMdl.eqProbEdges(idx))/(srcMdl.eqProbEdges(idx+1)-srcMdl.eqProbEdges(idx));
                    else % handle numerical issue
                        ratio = 1;
                    end
                end
            else
                ratio = 0.1; % This ratio can be changed
            end
            covF0(ii) = ratio*(f0raw(ii)-srcMdl.eqProbEdges(idx))+tgtMdl.eqProbEdges(idx);
        else
            % skip
        end
    end  
    
    % Find the nearest index
    function idx = nearestBin(x, bins)
        distX = pdist2(x, bins);
        [v, idx] = min(distX);
    end
end